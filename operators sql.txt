operators:
----------
Arithmetic operator: +,-,*,/
Relational operator: >,<,<=,>=,=,!=
Concatenation: ||-->pipeline
Logical : AND,OR,NOT
Special Operator: IS,ISNOT,IN,NOTIN,between,not between


Arithmetic operator:
--------------------
arithmetic operators can be used in both select clause and wait clause

1) WAQTD details of the employee along with salary increment of 10% for all the managers?
sal+(sal*%/100)--> formula to increment the percentage
2000+(2000*

2)WAQTD empname, sal, salary decremented by 20% for the employees whose mgr is 7788?
	select ename,sal,sal+0.8 dec_sal
	from emp
	where mgr='MANAGER';

note: we  can ue arithmetic operators for number datatype and date datatype but not for alphabets or alphanumerics

3)WAQTD details of the emp along with their annual salary for the employees whose annual salary is 60000?
	select emp.*,sal*12 ann_sal
	from emp
	where sal*12=60000;

4)WAQTD details of the employee whose salary is equals to 1800+1500-300?
	select emp.*,sal
 	from emp
 	where sal=1800+1500-300;


Special Operator:
-----------------
IS operator: IS operator is used to access empty cell within parenthesis null value from a particular column
Syntax:	Columnname IS null
	------------------
1)WAQTD details of the employee who are not in comm list?
	select * from emp
	where comm is null;

2)WAQTD details of the employee who dont have MGR?
	select * from emp
	where MGR is null;

3)ISNOT operator: ISNOT operator is used to access non empty cell from a particular column
Syntax: Columnname IS NOT null;
	-----------------------
1)WAQTD details of the employee who are in the comm list?
	select * from emp 
	where comm is not null;
2)WAQTD details of the employee who have MGR?
	select * from emp
	where mgr is not null;

IN operator: this operator is used to access multiple values symultaneously from a same column
Syntax: Columnname IN(val1,val2,....);
	------------------------------
1)WAQTD details of the employee whose name is SMITH,ALLEN,MARTIN,MILLER?
	 select * from emp 
	 where ename in ('SMITH','ALLEN','MARTIN','MILLER');

2)WAQTD details employee name and their job of the employees whose job is manager or analysit or president?
	select ename,job
	from emp where job in('MANAGER','ANALYST','PRESIDENT');

3)WAQTD employee name salary and ann sal of the employees whose ann salary is 60000,36000,15000?
	select ename,sal,sal*12
	from emp
	where sal*12 in('60000','36000','15000');

NOT IN operator: this operator is used to unaccess multiple values from a particular column
Syntax: Columnname not in(val1,val2,val3......);
	----------------------------------------

1)WAQTD details of the employee except those who are working in dept no 10,20,40?
	select *from emp 
	where deptno not in(10,20,40);

2)WAQTD details of the employee except those who are working as manager and president?
	select * from emp 
	where job not in('MANAGER','PRESIDENT');

3)WAQTD details of the employee whose salary is 1000 1250 2850 5000 with earning some comm?

4)WAQTD details employees except those who are working as clerk,analyst without any comm?
	select * from emp where job not in('clerk','analyst')
	and comm is null;

Between Operator: This operator is used to access the data which are present in between two given ranges
Syntax: columnname between range1 and range2
	------------------------------------
	->range1 must be always lesser than range2
	->output includes the given ranges
	Internal working mechanism >=range1 and <=range2
	number-> lesser number to greater number
	date-> lower date to greater date
	alphabet-> aplhabetical order of a starting character

1)WAQTD details of the emplyee whose salary is in between 1000 and 1600?
	select * from emp
	where sal 1000 and 1600;

2)WAQTD names of the employees whose name appears in between ALLEN and JAMES when it is arranged in alphabetical order?
	select * from emp
	where ename between 'ALLEN' and 'JAMES';

3)WAQTD details of the employee hired in the year 82 using between operator?
	select * from emp 
	where HIREDATE between '01-01-82' and '31-12-82';

Lke operator:
-------------
this operator is used for pattern matching
Syntax: Columnname like 'pattern';
->to achieve pattern matching we have 2 characters (-,%)
1. % whenever we dont know the no of characters to be present with sent time can hold 0 to n number of characters
Ename like 'A%'
	    EName
	----------------
	
Escape character:
-----------------
escape characters are the characters which is used to remove the speciality of the special character
we can make any character as escape character except (%,_)
Syntax:	Columnname like/not like 'pattern using escapchar' escape 'escape char';

Email
----------------
abc_@gmail
a_b_@gmail
abc@gmail
xyz@gmail
abc%@gmail

1)WAQTD detail of the student whose email contains '_'?
	select * from student
	where email like '%1_%' escape '1';

2)WAQTD details of the student whose email contains '%'?
	select * from student
	where email like '%1%%' escape '1';

3)WAQTD details of the students whose email contains atleast two'_s'?
	select * from student
	where email like '%A_%A_%'  escape 'A';

FUNCTIONS:
----------
functions are predefined methods which performs its own kind of tasks
three major components of functions:
1)Function Name : defines which task to be performed
2)Number of arguments : required to perform specific tasks
3)Return type : outcome from the particular function

				Functions
				---------
		Pre defined			 user defined
	Single row function  multi row function	   pl/sql
	number srf
	character

functions which are in-built within the application are known as predefined functions
two types: ->single row function
	   ->multi row function
->single row function: functions which perform tasks on every single row and gives output for every single row becomes single row sub-query function
if function takes n number of inputs and n number of ouputs we call it as single row
		    _______
	1I/p-------|       |---1o/p
	2I/p-------|       |---2o/p
		   | SRF   |
	nI/p-------|_______|---no/p

functions which is used to perform tasks based on numericals is known as srf
types of number SRF:
1)MOT()		5)ROUND()
2)POWER()	6)TRUNC()
3)SQRT()	7)CEIL()
4)ABS()

DUAL table:
-----------
Dual is a empty table which is used to perform tasks based on user inputs
ex: select length('JSPIDERS') from dual;
Length('JSPIDERS')
------------------
.................8
select reverse('abc') from dual;
REV
---
cba

MOD() function:
---------------
this function is used to find out the modules of a given number 
Syntax: MOD(arg1 arg2) arg1->Divident 
	               arg2->Divisor
eg: select mod(10,3)
    from dual;
    MOD(10,3)
    ---------
	    1

1)WAQTD the remainder when we divide emp number by 2?
	select mod(empno,2)
	from emp;
2)WAQTD details of the emp whose employee number is even?
	select * from emp
	where mod(empno,2)=0;
3)WAQTD ename mgr and salary of emp whose mgr is odd?
	select ename,mgr,sal
	from emp
	where mod(mgr,2)!=0;

Power() function:
-----------------
this function is used to find out the exponent of a given number
Syntax: power(arg1,arg2) arg1->base
			 arg2->exponent
eg: select power(2,3) from dual;

SQRT() function:
----------------
this function is used to find out the square root of given number
Syntax: SQRT(arg1) arg1->number
eg: select sqrt(9) from dual;  o/p->3

ABS() function:
---------------
this function is used to find out the absolute value of the given number
Syntax: ABS(arg1) arg1->amy form of numbers
eg: select abs(10) from dual;   o/p->10
    select abs(+12.5) from dual;  //12.5
    select 10-90 from dual;  o/p-> -80
    select abs(10-90) from dual;  o/p->80

Round() function:
-----------------
this function is used to round off the given decimal number
Syntax: round(arg1,arg2) arg1->inputnumber	arg2 is an optional
			 arg2->restricting size of decimal value
round function rounds of the given decimal number to its nearest integer number
eg: select round(3.45) from dual; //3
    select round(3.5) from dual; //4
    select round(3.66) from dual; //4
    round(10.243513,2) //10.24
    round(10.24810,2) //10.25
    round(37845.34,-1) //37850 it will check wheather >=5 and increments before number by +1

Trunc() function:
------------------
this fuction is used to round off the given number
Syntax: Trunc(arg1,arg2)  arg1->inputnumber	arg2 is an optional
			  arg2->restricting size of decimal value
trunc() always rounds of the given number to its lowest value (0 to 9) same number
eg: select trunc(245.31,-1) from dual; //240
    trunc(99.631) //99
    trunc(99999.-2) //99900

Ceil() function:
----------------
this fuction is used to round of the given number
Syntax :Ceil(arg1)  arg1->input number
ceil() always rounds of the given number to its highest value (0) same number (0-9) more than 0 t0 9 next number

1)WAQTD all the names from empl in lower case?
	select lower(ename) from empl;
	
			Character SRF
	_______________________|______________________
       |					      |
Case Manupulation				Character Manupulation
    Lower()					-length()      -Translate()
    upper()					concat()        Trim()
    Initcap()					Reverse()       LPAD()
						Substr()        RPAD()
						Intstr()        
						Replace()

Case manupulation:
------------------
this type is used to convert one type of data into another type of data with respect to their keys.

lowercase():
------------
this function is used to convert all the uppercase characters into lowercase characters
Syntax: lower(columnname)
eg: select lower('JSPIDERS') from dual;

UPPERCASE():
------------
this function is used to convert all the lower case characters into uppercase characters
Syntax: Select upper(Columnname)
eg: select upper('India') from dual;

1)WAQTD all the names from empl table in uppercase?
	select upper(ename) from empl;
Initcap():
----------
this function is used to convert the starting characters in uppercase and rest of the characters in lowercase
Syntax: select initcap('jspiders') from dual;

1)WAQTD details of the employee whose name is SMITH from empl table irrespective of case?
	select * from empl where lower(ename)='smith';
note: case manupulation function converts numerical inputs into String
	eg:select lower(123) from dual; -->integer value
		LOW
		---
		123 -->String value

Group:
------
Columns which we use inside group by clause is known as group expression

group function():
-----------------
agregate function or multirow function columns are known as group function
Since groupby clause executes before select clause

1)WAQTD dept no and total number of employees working in each department?
	select deptno,count(*) from emp group by deptno;

2)WAQTD JOB and no of employees working in each job?
	select job,count(*) from emp group by deptno;

3)WAQTD deptno maximum salary minimum salary and total salary from each deptno number?
	select deptno,max(sal,min(sal),sum(sal)
	from emp
	group by deptno;

4)WAQTD mgr and no of employees earning commision under each mgr?
	select mgr,count(comm)
	from emp
	group by mgr;

Group by clause along with where clause:
----------------------------------------
1)WAQTD no of employees with salary more than 1500 in each dept?
	select deptno,count(*)
	from emp 
	where sal>1500
	group by dept;

2)WAQTD total salary to be paid in each job except clerks?
	select sum(sal),job
	from emp
	where job!='CLERK'
	group by job;

3)WAQTD deptno and no of employees without commision in each deptno?
	select deptno,count(*)
	from emp
	where comm is null
	group by deptno;

Group by clause using multiple columns:
---------------------------------------
we can use multiple columns inside group by clause
working mechanism is symultaniously multiple column values must be same to get into the same group
if any one column value varies it forms a different group
	Group by job,deptno;

	deptno | job
	------------------
	10     | clerk		-->1group
	--------------
	10     | salesman	-->1group
	-----------------
	10     | manager	-->1group
	----------------
	20     | salesman	-->both the coloumn values are same same group
	20     | salesman
	-----------------
	20     | manager	-->1group
	----------------
	30     | clerk		-->both the coloumn values are same same group
	30     | clerk
	---------------

1)WAQTD total salary need to be paid for each job in each deptno?
	select deptno,job,sum(*)
	from emp
	group by deptno,job;
2)WAQTD no of employees with the same salary in each job?
	select job,sal,count(*)
	from emp
	group by job,sal;

CASE1: unknown value present in the same table
------
--In this case outquries & inner queries from clause table name must be same
--In this case outter queries where clause column & inner queries select clause column must be same

2)WAQTD details of the employee who are hired after king?
 select * from emp
 where job=(select job from emp
 where ename='JONES');

3)WAQTD employee name and salary of the employees whose salary is lesser than or equals to MILLER's salary?

CASE2:
------
--In this case outter queries and inner queries from clause table name varies
--To acheive case2 outter quries wher clause column and inner queries from clause must be always a relation building column between the   tables

1)WAQTD details of the employee working in accounting?
 	select * from emp
 	where deptno=(select deptno
 	from dept
 	where dname='ACCOUNTING');

2)WAQTD details of the employee who are working in dallas?
	select * from emp
	where deptno=(select deptno
	from dept
	where loc='DALLAS');

3)WAQTD dept detail of ford?
 	select * from dept
 	where deptno=(select deptno
 	from emp
 	where ename='FORD');

4)WAQTD the location of king?
 	select loc from dept
 	where deptno=(select deptno
 	from emp
	where ename='KING');

5)WAQTD the dept name of ward?
	select dname from dept
 	where deptno=(select deptno
 	from emp
 	where ename='WARD');

CASE3: Aggregate functions
------
--To achieve case3 outter quries where clause column and inner quries aggrigate function column must be same

1)WAQTD first hired emp detail from emp?

2)WAQTD details of the employee whose salary is more than avg salary of all the employees?
	 select * from emp
 	where sal>(select avg(sal)
 	from emp);

3)WAQTD  maximum salary employee detail?

CASE4: Employee-manager Relation
------
within emp table there is relation between empno and mgr

Finding out manager of a particular employees:

-In this case using employees mgr we will find the manager
-inner query is for employees and outer query is for manager
-outer queries where clause column must be employee inner queries select clause must be MGR 

1)WAQTD manager detail of Scott?
 	select * from emp
 	where empno=(select mgr from emp
 	where ename='SCOTT');

2)WAQTD employee name job and salary of wards manager?

Finding out employees of a particular manager:

-in this case we need to find out the employees who are working under particular manager
-outer query is for employee and inner query is for manager
-outer queries where clause column must be mgr and inner queries select clause column must be empno

1)WAQTD the details of the employee working under king?
	select * from emp
	where mgr=(select empno from emp
	where ename='KING');

2)WAQTD employee names working under clark?
	select * from emp
	where mgr=(select empno from emp
	where ename='CLARK');

Types of sub queries:
---------------------
1)Single row sub query
2)Multi row sub query
3)Nested sub query
4)Inline sub query
5)Co-related sub query

1)Single row sub query:
Inner query returning only one output for the outter query is known as single row sub query
		 ______
		|Outter|
		|query |
		--------
		   |	 _____
		   |____|Inner|
			|Query|
			-------
1)WAQTD details of the employee whose job is same as miller except miller?
	select * from emp
	where job=(select job from emp
	where ename='MILLER') and ename!='MILLER';

2)WAQTD who are hired before salesman?
	select * from emp
	where hiredate<(select hiredate from emp
	where ename='KING') and job='SALESMAN';

3)WAQTD details of the employee working in research department with salary more than 2000?
	select * from emp
	where deptno=(select deptno from dept
	where dname='RESEARCH') and sal>2000;

4)WAQTD whose mgr is same as allen's with comm less than 1000?
	select * from emp
	where mgr=(select mgr from emp
	where ename='ALLEN') and comm<1000;

Psudo columns:
--------------
Psudo columns are the in-built columns which is used to identify the records uniquely & sequentially
->By default all the tables in 'from' clause will be having Psudo columns
Types of Psudo columns:
	1)Rowid		2)RowNum

1)Rowid:
--------
it is a 18 character unique identifier column which goes in a sequence of alphabetical order
->Rowid is static
->Static means rowid given for particular

Note:-If we need to access whatever the record you need we need to make rownum static.
Inline sub-Query:
-----------------
->A sub-query writter inside from clause is know as inline sub-query
->Inline sub-query is used to access modified table from the original table
->The sub-query which we use inside from clause will be acting as a original table for the outer-query
->modified tables must be given a name explicitly as a reference

1)WAQTD empname,hiredate, and deptno using *?
2)WAQTD  ename,mgr,sal using *?
 	select e.* 
	from (select ename,mgr,sal from emp) e;

3)make emp name,job,sal and dept no as a original table and from this table display all the columns along with annual sal column?
	select e.* from (select ename,job,sal,deptno from emp) e;

4)make empname,mgr,sal and hiredate as join date as a original table and from this table dispaly the details of the employee whose join date is after the year 1981?
	 select *
 	 from (select ename,mgr,sal,hiredate join_date from emp)
 	 where join_date>'31-12-81';

Note:
-----
->we can make rownum static using inline sub-query
->since psudeo columns are present in all the tables which we use in from clause
even inline sub-query contains inbuilt psudo columns
-> hence we use alias name for rownum column which we use inside inline sub-query

1)WAQTD eighth record from emp table?
	select *
	from(select emp.*,rownum rn from emp)
	where rn=8;

2)WAQTD 3rd 5th 9th record from emp table?

-----------------------------------------------------------------------------
2)WAQTD first hired employee in each job except clerk?
	select * from emp
	where (job,hiredate) in (select job,min(hiredate)
	from emp where job!='Clerk' group by job);

3)WAQTD details of the employee who are working in a department where maximum no of employees are working?
 	select * from emp
 	where deptno in (select deptno from emp
 	group by deptno
 	having count(*)=(select max(count(*)) 
 	from emp group by deptno));

4)WAQTD details of the employee who are working in a job where maximum no of employees are working?
	select * from emp
	where job in (select job from emp
	group by job
 	having count(*)=(select max(count(*))
 	from emp
 	group by job));

5)WAQTD details

